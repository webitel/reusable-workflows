name: Deploy

on:
  workflow_call:
    inputs:
      component:
        type: string
        required: false
        default: dev
        description: Component of the APT repository

      repository-environment:
        type: string
        required: false
        default: acceptance
        description: Linked environment for upload build to repository (eg. acceptance, v25.04-releases, ...)

jobs:
  development:
    name: Development
    runs-on: [ arc-runner-set ]
    if: inputs.repository-environment == 'acceptance'
    environment: development
    steps:
      - name: Deploy
        uses: webitel/reusable-workflows/actions/deploy-action@main
        with:
          service: ${{ vars.SYSTEMD_SERVICE }}
          source: ${{ vars.PACKAGE_PATTERN }}
          host: ${{ secrets.DEPLOYMENTS_SSH_HOST_DEVELOPMENT }}
          user: ${{ secrets.DEPLOYMENTS_SSH_USER }}
          private-key: ${{ secrets.DEPLOYMENTS_SSH_PRIVATE_KEY }}

  testing:
    name: Testing
    runs-on: [ arc-runner-set ]
    needs: [ development ]
    if: inputs.repository-environment == 'acceptance'
    environment: testing
    steps:
      - name: Deploy
        uses: webitel/reusable-workflows/actions/deploy-action@main
        with:
          service: ${{ vars.SYSTEMD_SERVICE }}
          source: ${{ vars.PACKAGE_PATTERN }}
          host: ${{ secrets.DEPLOYMENTS_SSH_HOST_TESTING }}
          user: ${{ secrets.DEPLOYMENTS_SSH_USER }}
          private-key: ${{ secrets.DEPLOYMENTS_SSH_PRIVATE_KEY }}

  check-latest:
    name: Check latest release
    runs-on: [ arc-runner-set ]
    if: inputs.repository-environment != 'acceptance'
    outputs:
      latest: ${{ steps.check.outputs.latest }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history so we can list branches

      - name: For each git ref
        id: check
        run: |
          current_branch="${GITHUB_REF#refs/heads/}"
          echo "Current branch: $current_branch"

          latest_branch=$(git ls-remote --heads origin 'v*.*' \
            | awk '{print $2}' \
            | sed 's|refs/heads/||' \
            | sort -rV \
            | head -n1)

          echo "Latest release branch: $latest_branch"
          if [[ "$current_branch" == "$latest_branch" ]]; then
            echo "latest=true" >> "$GITHUB_OUTPUT"
          fi

  staging:
    name: Staging
    needs: [ check-latest ]
    if: inputs.repository-environment != 'acceptance' && needs.check-latest.outputs.latest == 'true'
    runs-on: [ arc-runner-set ]
    environment: testing
    steps:
      - name: Deploy
        uses: webitel/reusable-workflows/actions/deploy-action@main
        with:
          service: ${{ vars.SYSTEMD_SERVICE }}
          source: ${{ vars.PACKAGE_PATTERN }}
          host: ${{ secrets.DEPLOYMENTS_SSH_HOST_STAGING }}
          user: ${{ secrets.DEPLOYMENTS_SSH_USER }}
          private-key: ${{ secrets.DEPLOYMENTS_SSH_PRIVATE_KEY }}

  repository:
    name: Publish .deb package
    runs-on: [ arc-runner-set ]
    needs: [ testing, staging ]
    if: |
      always() &&
      !cancelled() &&
      (needs.testing.result == 'success' || needs.staging.result == 'success')

    environment: ${{ inputs.repository-environment }}
    steps:
      - name: Publish build
        uses: webitel/reusable-workflows/actions/deb-s3-upload-action@main
        with:
          source: ${{ vars.PACKAGE_PATTERN }}
          aws-bucket-name: ${{ vars.DEB_AWS_BUCKET_NAME }}
          aws-bucket-region: ${{ vars.DEB_AWS_DEFAULT_REGION }}
          aws-secret-id: ${{ secrets.DEB_AWS_ACCESS_KEY_ID }}
          aws-secret-key: ${{ secrets.DEB_AWS_SECRET_ACCESS_KEY }}
          component: ${{ inputs.component }}
          codename: ${{ vars.DEB_CODENAME }}
          gpg-private-key: ${{ secrets.REPO_SIGNING_KEY }}
          gpg-passphrase: ${{ secrets.REPO_SIGNING_KEY_PASSPHRASE }}