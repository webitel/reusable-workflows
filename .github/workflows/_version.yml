name: Version

on:
  workflow_call:
    inputs:
      development-branch:
        type: string
        required: false
        default: main
        description: Name of the development branch

      triggered-branch:
        type: string
        required: false
        default: ${{ github.ref_name }}
        description: Name of the triggered branch

    outputs:
      version:
        value: ${{ jobs.parse.outputs.version }}
        description: Extracted version

jobs:
  parse:
    name: Parse
    runs-on: [ arc-runner-set ]
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: For each git ref find the latest release branch
        id: latest-release-branch
        uses: webitel/reusable-workflows/actions/check-latest@check-latest-v1.0.1

      - name: Get version
        id: version
        uses: actions/github-script@v7
        with:
          script: |
            const developmentBranch = '${{ inputs.development-branch }}';
            const triggeredBranch = '${{ inputs.triggered-branch }}';
            const latestReleaseBranch = '${{ steps.latest-release-branch.outputs.version }}';
            
            console.log(`📋 Development branch: ${developmentBranch}`);
            console.log(`🔀 Triggered branch: ${triggeredBranch}`);
            console.log(`🏷️ Latest release branch: ${latestReleaseBranch || 'none'}`);
            
            function parseVersion(versionString) {
              if (!versionString) return null;
            
              const cleanVersion = versionString.replace(/^v/, '');
              const parts = cleanVersion.split('.');
              if (parts.length >= 2) {
                const year = parts[0];
                const month = parts[1].replace(/^0+/, '') || '0';
                return `${year}.${month}`;
              }
            
              return cleanVersion;
            }
            
            function getCurrentDateVersion() {
              const now = new Date();
              const year = now.getFullYear().toString().slice(-2);
              const month = (now.getMonth() + 1).toString();
              return `${year}.${month}`;
            }
            
            let version;
            
            if (triggeredBranch === developmentBranch) {
              console.log('🔨 Processing development build');
            
              if (latestReleaseBranch) {
                console.log(`📦 Using version from latest release branch: ${latestReleaseBranch}`);
                version = parseVersion(latestReleaseBranch);
              } else {
                console.log('📅 No release branch found, using date-based version');
                version = getCurrentDateVersion();
              }
            } else {
              console.log('🚀 Processing release build');
              console.log(`📦 Using version from triggered branch: ${triggeredBranch}`);
              version = parseVersion(triggeredBranch);
            }
            
            console.log(`✨ Final version: ${version}`);
            core.setOutput('version', version);
