name: Build

on:
  workflow_call:
    inputs:
      main-path:
        type: string
        required: false
        default: .
        description: Path to main.go (e.g., ./cmd/app or .)

      binary-name:
        type: string
        required: true

      build-args:
        type: string
        required: false
        default: -trimpath
        description: |
          Traversed as: go build [build-args]
          See: https://pkg.go.dev/cmd/go#hdr-Compile_packages_and_dependencies

      ldflags:
        type: string
        required: false
        default: -s -w
        description: |
          Additional arguments to pass on each go tool link invocation, 
          that combines the Go archive or object for a package main, 
          along with its dependencies into an executable binary.
          Traversed as: go build -ldflags="[ldflags]"
          Example:
          ```
            ldflags: >
              -s -w
              -X github.com/webitel/repository/cmd.commit=COMMIT_SHA
          ```
          
          See: https://pkg.go.dev/cmd/link

      version:
        description: Extracted version to use for the build
        required: true
        type: string

      version-build:
        required: true
        type: string

      version-metadata:
        type: string
        required: false

      prerelease:
        type: string
        required: false

      package-name:
        type: string
        required: true

      package-description:
        type: string
        required: true

      package-contents:
        type: string
        required: true
        description: |
          Package contents specification in nFPM format.
          See: https://github.com/webitel/reusable-workflows/tree/main/actions/nfpm-build-action#contents-format

      generated-code:
        type: string
        required: false
        default: false
        description: Download generated code

jobs:
  compile:
    name: Application
    runs-on: [ arc-runner-set ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Download generated code
        if: inputs.generated-code == 'true'
        uses: actions/download-artifact@v4
        with:
          name: generated-code

      - name: Build
        run: go build ${{ inputs.build-args }} -ldflags="${{ inputs.ldflags }}" -o "${{ inputs.binary-name }}" ${{ inputs.main-path }}
        env:
          GOOS: linux
          GOARCH: amd64

      - name: Parse package contents for upload
        id: parse-upload-pattern
        if: inputs.package-contents != ''
        uses: actions/github-script@v7
        with:
          script: |
            const packageContents = `${{ inputs.package-contents }}`.trim();
            
            core.startGroup('Parsing Package Contents');
            core.info('Raw package contents:');
            core.info(packageContents);
            
            // Parse package contents and extract src paths where type != 'dir'
            const artifactPaths = packageContents
              .split('\n')
              .map(line => line.trim())
              .filter(line => line.length > 0)
              .map(line => {
                const srcMatch = line.match(/src=([^\s]+)/);
                const typeMatch = line.match(/type=([^\s]+)/);
            
                return {
                  src: srcMatch ? srcMatch[1] : null,
                  type: typeMatch ? typeMatch[1] : null,
                  line: line
                };
              })
              .filter(item => {
                if (!item.src || !item.type) {
                  core.warning(`Skipping invalid line: ${item.line}`);
                  return false;
                }
            
                if (item.type === 'symlink') {
                  core.info(`Skipping symlink: ${item.src}`);
                  return false;
                }
            
                core.info(`âœ“ Including file: ${item.src} (type: ${item.type})`);
                return true;
              })
              .map(item => item.src);
            
            // Remove duplicates
            const uniquePaths = [...new Set(artifactPaths)];
            
            // Create the upload pattern
            const uploadPattern = uniquePaths.join('\n');
            
            core.info('Generated artifact upload pattern:');
            core.info(uploadPattern || '(no artifacts to upload)');
            core.endGroup();
            
            // Set outputs
            core.setOutput('upload-pattern', uploadPattern);

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-source
          compression-level: 9
          include-hidden-files: true
          path: |
            dummy-file-to-keep-directory-structure.txt
            ${{ inputs.binary-name }}
            ${{ steps.parse-upload-pattern.outputs.upload-pattern }}

  build:
    name: Package
    needs: [ compile ]
    runs-on: [ arc-runner-set ]
    steps:
      - name: Download compiled file
        uses: actions/download-artifact@v4
        with:
          name: build-source

      - name: Build package
        id: build
        uses: webitel/reusable-workflows/actions/nfpm-build-action@main
        with:
          nfpm-version: latest
          formats: deb
          target: dist
          maintainer: Webitel <support@webitel.com>
          homepage: https://webitel.com
          arch: amd64
          platform: linux
          package-name: ${{ inputs.package-name }}
          package-description: ${{ inputs.package-description }}
          version: ${{ inputs.version }}
          release: ${{ inputs.version-build }}
          prerelease: ${{ inputs.prerelease }}
          version-metadata: ${{ inputs.version-metadata }}
          contents: |
            src=${{ inputs.binary-name }} dst=/usr/local/bin/${{ inputs.binary-name }} type=file mode=0755
            ${{ inputs.package-contents }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-packages
          compression-level: 9
          path: dist